(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony import */ var _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emurgo/cardano-serialization-lib-browser */ \"./node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"./node_modules/bignumber.js/bignumber.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"./utils.js\");\n\n\n\nconst cardanoAccessBtn = document.querySelector(\"#request-access\");\nconst getUnUsedAddresses = document.querySelector(\"#get-unused-addresses\");\nconst getUsedAddresses = document.querySelector(\"#get-used-addresses\");\nconst getChangeAddress = document.querySelector(\"#get-change-address\");\nconst getAccountBalance = document.querySelector(\"#get-balance\");\nconst getUtxos = document.querySelector(\"#get-utxos\");\nconst submitTx = document.querySelector(\"#submit-tx\");\nconst signTx = document.querySelector(\"#sign-tx\");\nconst createTx = document.querySelector(\"#create-tx\");\nconst alertEl = document.querySelector(\"#alert\");\nconst spinner = document.querySelector(\"#spinner\");\n\nlet accessGranted = false;\nlet cardanoApi;\nlet utxos;\nlet changeAddress;\nlet transactionHex;\n\ncardanoAccessBtn.addEventListener(\"click\", () => {\n  toggleSpinner(\"show\");\n  cardano.yoroi.enable().then(function (api) {\n    toggleSpinner(\"hide\");\n    alertSuccess(\"You have access now\");\n    accessGranted = true;\n    cardanoApi = api;\n  });\n});\n\ngetAccountBalance.addEventListener(\"click\", () => {\n  if (!accessGranted) {\n    alertError(\"Should request access first\");\n  } else {\n    toggleSpinner(\"show\");\n    cardanoApi.get_balance().then(function (balance) {\n      toggleSpinner(\"hide\");\n      alertSuccess(`Account Balance: ${balance}`);\n    });\n  }\n});\n\ngetUnUsedAddresses.addEventListener(\"click\", () => {\n  if (!accessGranted) {\n    alertError(\"Should request access first\");\n  } else {\n    toggleSpinner(\"show\");\n    cardanoApi.get_unused_addresses().then(function (addresses) {\n      toggleSpinner(\"hide\");\n      if (addresses.length === 0) {\n        alertWarrning(\"No unused addresses\");\n      } else {\n        alertSuccess(`Address: `);\n        alertEl.innerHTML =\n          \"<pre>\" + JSON.stringify(addresses, undefined, 2) + \"</pre>\";\n      }\n    });\n  }\n});\n\ngetUsedAddresses.addEventListener(\"click\", () => {\n  if (!accessGranted) {\n    alertError(\"Should request access first\");\n  } else {\n    toggleSpinner(\"show\");\n    cardanoApi.get_used_addresses().then(function (addresses) {\n      toggleSpinner(\"hide\");\n      if (addresses.length === 0) {\n        alertWarrning(\"No used addresses\");\n      } else {\n        alertSuccess(`Address: ${addresses.concat(\",\")}`);\n        alertEl.innerHTML =\n          \"<pre>\" + JSON.stringify(addresses, undefined, 2) + \"</pre>\";\n      }\n    });\n  }\n});\n\ngetChangeAddress.addEventListener(\"click\", () => {\n  if (!accessGranted) {\n    alertError(\"Should request access first\");\n  } else {\n    toggleSpinner(\"show\");\n    cardanoApi.get_change_address().then(function (address) {\n      toggleSpinner(\"hide\");\n      if (address.length === 0) {\n        alertWarrning(\"No change addresses\");\n      } else {\n        changeAddress = address;\n        alertSuccess(`Address: `);\n        alertEl.innerHTML =\n          \"<pre>\" + JSON.stringify(address, undefined, 2) + \"</pre>\";\n      }\n    });\n  }\n});\n\ngetUtxos.addEventListener(\"click\", () => {\n  if (!accessGranted) {\n    alertError(\"Should request access first\");\n    return;\n  }\n  toggleSpinner(\"show\");\n  cardanoApi.get_utxos().then((utxosResponse) => {\n    toggleSpinner(\"hide\");\n    if (utxosResponse.length === 0) {\n      alertWarrning(\"NO UTXOS\");\n    } else {\n      utxos = utxosResponse;\n      alertSuccess(`Check the console`);\n      alertEl.innerHTML =\n        \"<pre>\" + JSON.stringify(utxosResponse, undefined, 2) + \"</pre>\";\n    }\n  });\n});\n\nsubmitTx.addEventListener(\"click\", () => {\n  if (!accessGranted) {\n    alertError(\"Should request access first\");\n    return;\n  }\n  if (!transactionHex) {\n    alertError(\"Should sign tx first\");\n    return;\n  }\n\n  toggleSpinner(\"show\");\n  cardanoApi\n    .submit_tx(transactionHex)\n    .then((txId) => {\n      toggleSpinner(\"hide\");\n      alertSuccess(`Transaction ${txId} submitted`);\n    })\n    .catch((error) => {\n      toggleSpinner(\"hide\");\n      alertWarrning(\"Transaction submission failed\");\n    });\n});\n\nconst AMOUNT_TO_SEND = \"1000000\";\nconst SEND_TO_ADDRESS =\n  \"addr1q87f7g7ay2597q3du3unv3tnx0n5hw9wcr5unt0zzpx2tflzjmv5pufjd3ehldg0d73lxyaqjj9mc0j5sly3usknhcvqh7qrfv\";\n\nsignTx.addEventListener(\"click\", async () => {\n  console.log(\"sign tx runningsss...\");\n  toggleSpinner(\"show\");\n\n  if (!accessGranted) {\n    alertError(\"Should request access first\");\n    return;\n  }\n\n  if (!utxos) {\n    alertError(\"Should request utxos first\");\n    return;\n  }\n\n  if (!changeAddress) {\n    alertError(\"Should request change address first\");\n  }\n\n  const txBuilder = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionBuilder\"].new(\n    // all of these are taken from the mainnet genesis settings\n    // linear fee parameters (a*size + b)\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"LinearFee\"].new(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"44\"),\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"155381\")\n    ),\n    // minimum utxo value\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"1000000\"),\n    // pool deposit\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"500000000\"),\n    // key deposit\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"2000000\"),\n    // maxValueBytes\n    5000,\n    // maxTxBytes\n    16384\n  );\n\n  // add a keyhash input - for ADA held in a Shelley-era normal address (Base, Enterprise, Pointer)\n  const utxo = utxos[0];\n\n  const addr = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Address\"].from_bytes(\n    Buffer.from(utxo.receiver, \"hex\")\n  );\n  const baseAddr = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BaseAddress\"].from_address(addr);\n  const keyHash = baseAddr.payment_cred().to_keyhash();\n  \n  let newinputs = [];\n  utxos.forEach(item => {\n    newinputs.push({\n      txid: item.tx_hash,\n      index: item.tx_index,\n      value: item.amount,\n      tokens: Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"transformTokensData\"])(item.assets)\n    });\n  });\n  let policyId = \"\";\n  let assetName = \"\";\n  let totalTokenIn = bignumber_js__WEBPACK_IMPORTED_MODULE_1___default()(0);\n  let totalAdaIn = bignumber_js__WEBPACK_IMPORTED_MODULE_1___default()(0);\n  newinputs.forEach(item => {\n    let valueIn = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Value\"].new(\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(bignumber_js__WEBPACK_IMPORTED_MODULE_1___default()(item.value).toFixed())\n    );\n    totalAdaIn = totalAdaIn.plus(item.value);\n\n    let multiAssetIn = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"MultiAsset\"].new();\n    item.tokens.forEach(token => {\n      console.log(\"--------->token\", token)\n      let assetIn = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Assets\"].new();\n      token.assets.forEach(asset => {\n        assetIn.insert(\n          _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"AssetName\"].new(Buffer.from(asset.assetName)),\n          _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(bignumber_js__WEBPACK_IMPORTED_MODULE_1___default()(asset.value).toFixed())\n        );\n        if (token.policyId == policyId && asset.assetName == assetName) {\n          totalTokenIn = totalTokenIn.plus(asset.value);\n        }\n      });\n      multiAssetIn.insert(\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"ScriptHash\"].from_bytes(Buffer.from(token.policyId, \"hex\")),\n        assetIn\n      );\n    });\n\n    if (multiAssetIn.len() > 0) {\n      valueIn.set_multiasset(multiAssetIn);\n    }\n\n    txBuilder.add_key_input(\n      keyHash,\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionInput\"].new(\n        _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionHash\"].from_bytes(Buffer.from(item.txid, \"hex\")),\n        item.index\n      ),\n      valueIn\n    );\n  });\n  // for (let index = 0; index < utxos.length; index++) {\n  //   txBuilder.add_key_input(\n  //     keyHash,\n  //     CardanoWasm.TransactionInput.new(\n  //       CardanoWasm.TransactionHash.from_bytes(\n  //         Buffer.from(utxos[index].tx_hash, \"hex\")\n  //       ), // tx hash\n  //       utxos[index].tx_index // index\n  //     ),\n  //     CardanoWasm.Value.new(CardanoWasm.BigNum.from_str(utxos[index].amount))\n  //   );\n  // }\n\n  const shelleyOutputAddress = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Address\"].from_bech32(SEND_TO_ADDRESS);\n\n  const shelleyChangeAddress = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Address\"].from_bytes(\n    Buffer.from(changeAddress, \"hex\")\n  );\n\n  // add output to the tx\n  txBuilder.add_output(\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionOutput\"].new(\n      shelleyOutputAddress,\n      _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Value\"].new(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(AMOUNT_TO_SEND))\n    )\n  );\n\n  const ttl = await Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\"getTtlFromIBP\"])();\n  console.log(`ttl:>>`, ttl)\n  txBuilder.set_ttl(ttl + 2000);\n\n  // calculate the min fee required and send any change to an address\n  txBuilder.add_change_if_needed(shelleyChangeAddress);\n\n  const txBody = txBuilder.build();\n  const txHex = Buffer.from(txBody.to_bytes()).toString(\"hex\");\n\n  cardanoApi\n    .sign_tx(txHex, true)\n    .then((witnessSetHex) => {\n      toggleSpinner(\"hide\");\n\n      const witnessSet = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionWitnessSet\"].from_bytes(\n        Buffer.from(witnessSetHex, \"hex\")\n      );\n      const transaction = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Transaction\"].new(\n        txBody,\n        witnessSet,\n        undefined\n      );\n      transactionHex = Buffer.from(transaction.to_bytes()).toString(\"hex\");\n      alertSuccess(\"Signing tx succeeds: \" + transactionHex);\n    })\n    .catch((error) => {\n      console.error(error);\n      toggleSpinner(\"hide\");\n      alertWarrning(\"Signing tx fails\");\n    });\n});\n\ncreateTx.addEventListener(\"click\", () => {\n  toggleSpinner(\"show\");\n\n  if (!accessGranted) {\n    alertError(\"Should request access first\");\n    return;\n  }\n\n  const output = _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"TransactionOutput\"].new(\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Address\"].from_bech32(SEND_TO_ADDRESS),\n    _emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"Value\"].new(_emurgo_cardano_serialization_lib_browser__WEBPACK_IMPORTED_MODULE_0__[\"BigNum\"].from_str(\"1000002\"))\n  );\n\n  const txReq = {\n    includeInputs: [\n      \"a8ecebf0632518736474012f8d644b6b287859713f60624e961d230422e45c192\",\n    ],\n    includeOutputs: [Buffer.from(output.to_bytes()).toString(\"hex\")],\n    includeTargets: [\n      {\n        // do not specify value, the connector will use minimum value\n        address:\n          \"00756c95f9967c214e571500a0140b88f6dd9c4a7444e74acc1841ce92c3892366f174a76af9252f78368f5747d3055ab3568ea3b6bf40b01e\",\n        assets: {\n          \"2c9d0ecfc2ee1288056df15be4196d8ded73db345ea5b4cd5c7fac3f.76737562737465737435\": 1,\n        },\n      },\n    ],\n  };\n\n  cardanoApi\n    .create_tx(txReq, true)\n    .then((txHex) => {\n      toggleSpinner(\"hide\");\n      alertSuccess(\"Creating tx succeeds: \" + txHex);\n      transactionHex = txHex;\n    })\n    .catch((error) => {\n      console.error(error);\n      toggleSpinner(\"hide\");\n      alertWarrning(\"Creating tx fails\");\n    });\n});\n\nif (typeof cardano === \"undefined\") {\n  alert(\"Cardano not found\");\n} else {\n  console.log(\"Cardano found\");\n  window.addEventListener(\"cardano_wallet_disconnected\", function (event) {\n    console.log(\"Wallet Disconnect\");\n  });\n}\n\nfunction alertError(text) {\n  alertEl.className = \"alert alert-danger\";\n  alertEl.innerHTML = text;\n}\n\nfunction alertSuccess(text) {\n  alertEl.className = \"alert alert-success\";\n  alertEl.innerHTML = text;\n}\n\nfunction alertWarrning(text) {\n  alertEl.className = \"alert alert-warning\";\n  alertEl.innerHTML = text;\n}\n\nfunction toggleSpinner(status) {\n  if (status === \"show\") {\n    spinner.className = \"spinner-border\";\n    alertEl.className = \"d-none\";\n  } else {\n    spinner.className = \"d-none\";\n  }\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./node_modules/@emurgo/cardano-serialization-lib-browser sync recursive":
/*!*********************************************************************!*\
  !*** ./node_modules/@emurgo/cardano-serialization-lib-browser sync ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/@emurgo/cardano-serialization-lib-browser sync recursive\";\n\n//# sourceURL=webpack:///./node_modules/@emurgo/cardano-serialization-lib-browser_sync?");

/***/ }),

/***/ "./utils.js":
/*!******************!*\
  !*** ./utils.js ***!
  \******************/
/*! exports provided: getTtlFromIBP, getTtl, transformTokensData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTtlFromIBP\", function() { return getTtlFromIBP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getTtl\", function() { return getTtl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"transformTokensData\", function() { return transformTokensData; });\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ \"./node_modules/bignumber.js/bignumber.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var node_infinito_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node-infinito-api */ \"./node_modules/node-infinito-api/index.js\");\n/* harmony import */ var node_infinito_api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(node_infinito_api__WEBPACK_IMPORTED_MODULE_1__);\n\n\nconst api = new node_infinito_api__WEBPACK_IMPORTED_MODULE_1___default.a({\n  apiKey: \"770b91bf-0166-45fb-9c1c-deab640a0571\",\n  secret: \"lyKQr6weARNKvoJ8y7qiZ1PxZmM1973v\",\n  baseUrl: \"https://api.infinito.io/\",\n  logLevel: \"ALL\",\n});\n\nasync function getTtlFromIBP() {\n  try {\n    let params = [\n      {\n        name: \"getBestBlock\",\n        method: \"GET\",\n        url: \"/chains/v1/ADA/bestblock\",\n      },\n    ];\n\n    api.extendMethod(\"chains\", params, api);\n    const response = await api.chains.getBestBlock();\n    if (response.data && response.cd == 0) {\n      return response.data.slot;\n    } else {\n      return null;\n    }\n  } catch (err) {\n    console.log(err);\n    return null;\n  }\n}\n\nfunction getTtl() {\n  const fullConfig = [\n    {\n      StartAt: 0,\n      ChainNetworkId: \"0\",\n      ByronNetworkId: 1097911063,\n      GenesisDate: \"1563999616000\",\n      SlotsPerEpoch: 21600,\n      SlotDuration: 20,\n    },\n    {\n      StartAt: 74,\n      SlotsPerEpoch: 432000,\n      SlotDuration: 1,\n      PerEpochPercentageReward: 69344,\n      LinearFee: {\n        coefficient: \"44\",\n        constant: \"155381\",\n      },\n      MinimumUtxoVal: \"1000000\",\n      PoolDeposit: \"500000000\",\n      KeyDeposit: \"2000000\",\n    },\n  ];\n  /* mainnet: \n  const fullConfig = [\n    {\n      \"StartAt\": 0,\n      \"ChainNetworkId\": \"1\",\n      \"ByronNetworkId\": 764824073,\n      \"GenesisDate\": \"1506203091000\",\n      \"SlotsPerEpoch\": 21600,\n      \"SlotDuration\": 20\n    },\n    {\n      \"StartAt\": 208,\n      \"SlotsPerEpoch\": 432000,\n      \"SlotDuration\": 1,\n      \"PerEpochPercentageReward\": 69344,\n      \"LinearFee\": {\n        \"coefficient\": \"44\",\n        \"constant\": \"155381\"\n      },\n      \"MinimumUtxoVal\": \"1000000\",\n      \"PoolDeposit\": \"500000000\",\n      \"KeyDeposit\": \"2000000\"\n    }\n  ]\n  */\n  const defaultTtlOffset = 7200;\n  const timeToSlot = genTimeToSlot(fullConfig);\n  const absSlotNumber = new bignumber_js__WEBPACK_IMPORTED_MODULE_0___default.a(\n    timeToSlot({\n      time: new Date(),\n    }).slot\n  );\n\n  return absSlotNumber.plus(defaultTtlOffset).toNumber();\n}\n\nfunction genTimeToSlot(\n  config /*: $ReadOnlyArray<$ReadOnly<{\n    StartAt?: number,\n    GenesisDate?: string,\n    SlotsPerEpoch?: number,\n    SlotDuration?: number,\n    ...,\n  }>>*/\n) /*: TimeToAbsoluteSlotFunc */ {\n  return (request /*: TimeToAbsoluteSlotRequest*/) => {\n    const { GenesisDate } = config[0];\n    if (GenesisDate == null)\n      throw new Error(`${nameof(genTimeToSlot)} missing genesis params`);\n    let SlotDuration = config[0].SlotDuration;\n    let SlotsPerEpoch = config[0].SlotsPerEpoch;\n    let timeLeftToTip =\n      request.time.getTime() -\n      new Date(Number.parseInt(GenesisDate, 10)).getTime();\n    let slotCount = 0;\n\n    // for pairs of config changes (x, x+1), get the time between these pairs\n    for (let i = 0; i < config.length - 1; i++) {\n      const start = config[i].StartAt;\n      if (start === undefined) {\n        throw new Error(`${nameof(genTimeToSlot)} missing start`);\n      }\n      const end = config[i + 1].StartAt;\n      if (end === undefined) {\n        throw new Error(`${nameof(genTimeToSlot)} missing end`);\n      }\n      const numEpochs = end - start;\n\n      if (SlotDuration == null || SlotsPerEpoch == null)\n        throw new Error(`${nameof(genTimeToSlot)} missing params`);\n\n      // queried time is before the next protocol parameter choice\n      if (timeLeftToTip < SlotsPerEpoch * SlotDuration * 1000 * numEpochs) {\n        break;\n      }\n      slotCount += SlotsPerEpoch * numEpochs;\n      timeLeftToTip -= SlotsPerEpoch * SlotDuration * 1000 * numEpochs;\n\n      if (config[i + 1].SlotDuration !== undefined) {\n        SlotDuration = config[i + 1].SlotDuration;\n      }\n      if (config[i + 1].SlotsPerEpoch !== undefined) {\n        SlotsPerEpoch = config[i + 1].SlotsPerEpoch;\n      }\n    }\n\n    if (SlotDuration == null || SlotsPerEpoch == null)\n      throw new Error(`${nameof(genTimeToSlot)} missing params`);\n\n    // find how many slots since the last update\n    const secondsSinceLastUpdate = timeLeftToTip / 1000;\n    slotCount += Math.floor(secondsSinceLastUpdate / SlotDuration);\n\n    const msIntoSlot = timeLeftToTip % 1000;\n    const secondsIntoSlot = secondsSinceLastUpdate % SlotDuration;\n    return {\n      slot: slotCount,\n      msIntoSlot: 1000 * secondsIntoSlot + msIntoSlot,\n    };\n  };\n}\n\n\nconst transformTokensData = tokens => {\n  let policyIds = [];\n  let newtokens = [];\n  tokens.forEach(token => {\n    if (policyIds.indexOf(token.policyId) === -1) {\n      newtokens.push({\n        policyId: token.policyId,\n        assets: [\n          {\n            assetName: token.assetName,\n            assetId: token.assetId,\n            value: token.amount\n          }\n        ]\n      });\n      policyIds.push(token.policyId);\n    } else {\n      const element = newtokens.find(\n        ({ policyId }) => policyId == token.policyId\n      );\n      element.assets.push({\n        assetName: token.assetName,\n        assetId: token.assetId,\n        value: token.amount\n      });\n    }\n  });\n  return newtokens;\n};\n\n//# sourceURL=webpack:///./utils.js?");

/***/ })

}]);